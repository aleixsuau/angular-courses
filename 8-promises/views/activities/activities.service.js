angular
    .module('myApp')
    .service('ActivitiesService',ActivitiesService);

ActivitiesService.$inject = ["$http", "$q"];

// Service
function ActivitiesService ($http, $q) {

    var self = this;
    // Bindable members
    self.activities;
    self.activitiesCodes;
    // Public Methods
    self.getAll = getAll;
    self.getActivityByName = getActivityByName;
    self.post = post;
    self.remove = remove;
    self.getCodes = getCodes;   
    self.getActivityCode = getActivityCode;    

    // Get all activities
    function getAll () {
        return $http
                .get('https://angularbeds.firebaseio.com/aleix/activities.json')
                .then(function (response) {
                    // OBJECT VERSION                  
                    // Update model
                    self.activities = response.data;
                    return self.activities;

                    // ARRAY VERSION
                });
    };

    // Get the activity object from its title
    function getActivityByName (activityName) {
        var activityMatch;
        angular.forEach(self.activities, function(activity){
            if (activity.title === activityName) {
                activityMatch = activity;
            }
        });
        return activityMatch;
    }    

    // Save an activity
    function post (newActivity) {
        // Build new activity's model
        var newActivityModel = buildNewActivityModel(newActivity);
        return $http
                .post('https://angularbeds.firebaseio.com/aleix/activities.json', newActivityModel)
                .then(function(response){
                    // OBJECT VERSION
                    // Update Model adding the new activity with the id generated by the server
                    self.activities[response.data.name] = newActivityModel;
                    return self.activities;

                    /*// ARRAY VERSION
                    newActivityModel.id = response.data.name;
                    self.activities.push(newActivityModel);
                    return self.activities;*/
                });
    };

    // Remove an activity
    function remove (id) {
        return $http
                .delete('https://angularbeds.firebaseio.com/aleix/activities/'+ id + '.json')
                .then(function(response){
                    // OBJECT VERSION
                    // Update model
                    delete self.activities[id];
                    return self.activities;

                    /*// ARRAY VERSION
                    var index = self.activities.indexOf(id);
                    self.activities.splice(index,1);*/
                });
    };

    // Get actitivities codes
    function getCodes () {
        return $http
                .get('https://angularbeds.firebaseio.com/aleix/activitiesCodes.json')
                .then(function (response) {
                    // Update model
                    self.activitiesCodes = response.data;
                    return self.activitiesCodes;
                });
    };    

    function getActivityCode (title,coach,activitiesCodes,coachesCodes) {
        var title = title.replace(/ /g,'');
        var coach = coach.replace(/ /g,'');
        var activityCode = activitiesCodes[title];
        var coachCode = coachesCodes[coach];

        if ( activityCode && coachCode ) {
            return activityCode + '-' + coachCode;
        } else {
            return "No Code";
        }        
    }

    // Build new activity's model
    function buildNewActivityModel (newActivity) {        
        newActivity.schedule = {};
        angular.forEach(newActivity.schedules, function(schedule){
            // Build activity's schedule
            var scheduleDay = schedule.day.toLowerCase();
            var scheduleHour = schedule.time.getHours();
            var scheduleMinute = schedule.time.getMinutes();
            var scheduleTime = Number(scheduleHour + '.' + scheduleMinute);

            newActivity.schedule[scheduleDay] = schedule[scheduleDay] || [];
            newActivity.schedule[scheduleDay].push(scheduleTime);
        });
        // Init the scores and users props
        newActivity.scores = [];
        newActivity.users = 0;
        // Delete schedules Array (is not in the original model)
        delete newActivity.schedules;
        // Copy the newActivity to avoid unintended edition (by reference)
        var newActivityCopy = angular.copy(newActivity);
        return newActivityCopy;
    }

    // EXAMPLE: Use case of $q.deferred
    // Example of a $q deferred need
    self.playAudio = function () {
        var deferred = $q.defer();
        var audio = new Audio("http://meditationroom.org/free-nature-sounds/wood-masted-sailboat-audio/wood-masted-sailboat.mp3");

        audio.addEventListener('loadeddata', function() { 
           alert('Audio Loaded!');
        });
        audio.addEventListener('error', function() { 
           deferred.reject('There was an error loadind the file :(');
        });
        audio.addEventListener('canplaythrough', function() {
            audio.play();
            deferred.resolve(audio);
        });

        return deferred.promise;
    }
    
}